@app.route("/search_completed_notes")
def search_completed_notes():
    if "user_id" not in session:
        return "Unauthorized", 401

    db = get_db()
    cursor = db.cursor(dictionary=True)
    
    search = request.args.get("q", "")
    if search:
        cursor.execute(
            """
            SELECT * FROM notes
            WHERE user_id=%s AND (content LIKE %s OR title LIKE %s AND completed=TRUE)
            ORDER BY created_at DESC
            """,
            (session["user_id"], f"%{search}%", f"%{search}%")
        )
    else:
        cursor.execute(
            """
            SELECT * FROM notes 
            WHERE user_id=%s AND completed=TRUE 
            ORDER BY created_at DESC
            """,
            (session["user_id"],)
        )

    notes_list = cursor.fetchall()
    db.close()

    return render_template("partials/notes_completed.html", notes=notes_list)


document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search");
    const notesContainer = document.getElementById("notes-container");

    searchInput.addEventListener("input", () => {
        const query = searchInput.value;
        fetch(`/search_notes?q=${encodeURIComponent(query)}`)
            .then(response => response.text())
            .then(html => {
                notesContainer.innerHTML = html;
            });
    });
});

document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("completed_search");
    const notesContainer = document.getElementById("notes-container");

    searchInput.addEventListener("input", () => {
        const query = searchInput.value;
        fetch(`/search_completed_notes?q=${encodeURIComponent(query)}`)
            .then(response => response.text())
            .then(html => {
                notesContainer.innerHTML = html;
            });
    });
});


@app.route("/search_notes")
def search_notes():
    if "user_id" not in session:
        return "Unauthorized", 401

    db = get_db()
    cursor = db.cursor(dictionary=True)

    search = request.args.get("q", "")
    completed = request.args.get("completed", "false").lower() == "true"  # detect if we want completed notes

    if search:
        cursor.execute(
            """
            SELECT * FROM notes
            WHERE user_id=%s AND (content LIKE %s OR title LIKE %s) AND completed=%s
            ORDER BY created_at DESC
            """,
            (session["user_id"], f"%{search}%", f"%{search}%", completed)
        )
    else:
        cursor.execute(
            """
            SELECT * FROM notes 
            WHERE user_id=%s AND completed=%s
            ORDER BY created_at DESC
            """,
            (session["user_id"], completed)
        )

    notes_list = cursor.fetchall()
    db.close()

    return render_template("partials/notes_list.html", notes=notes_list)

@app.route("/search_completed_notes")
def search_completed_notes():
    if "user_id" not in session:
        return "Unauthorized", 401

    db = get_db()
    cursor = db.cursor(dictionary=True)

    search = request.args.get("q", "")
    completed = request.args.get("completed", "false").lower() == "true"  # detect if we want completed notes

    if search:
        cursor.execute(
            """
            SELECT * FROM notes
            WHERE user_id=%s AND (content LIKE %s OR title LIKE %s) AND completed=%s
            ORDER BY created_at DESC
            """,
            (session["user_id"], f"%{search}%", f"%{search}%", completed)
        )
    else:
        cursor.execute(
            """
            SELECT * FROM notes 
            WHERE user_id=%s AND completed=%s
            ORDER BY created_at DESC
            """,
            (session["user_id"], completed)
        )

    notes_list = cursor.fetchall()
    db.close()

    return render_template("partials/notes_completed.html", notes=notes_list)